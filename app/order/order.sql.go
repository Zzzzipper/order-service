// Code generated by sqlc. DO NOT EDIT.
// source: order.sql

package order

import (
	"context"
	"encoding/json"
)

const addOrder = `-- name: AddOrder :exec
INSERT INTO orders (
  order_request,
  rrn,
  order_id,
  seller_id
) VALUES (
  $1,
  $2,
  $3,
  $4
)
`

type AddOrderParams struct {
	OrderRequest json.RawMessage
	Rrn          string
	OrderID      string
	SellerID     string
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) error {
	_, err := q.db.ExecContext(ctx, addOrder,
		arg.OrderRequest,
		arg.Rrn,
		arg.OrderID,
		arg.SellerID,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :one
DELETE FROM orders
WHERE order_id = $1 AND seller_id = $2
RETURNING id, create_time, order_request, rrn, order_id, seller_id
`

type DeleteOrderParams struct {
	OrderID  string
	SellerID string
}

func (q *Queries) DeleteOrder(ctx context.Context, arg DeleteOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, deleteOrder, arg.OrderID, arg.SellerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.OrderRequest,
		&i.Rrn,
		&i.OrderID,
		&i.SellerID,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT
  o.order_request as order_request, o.rrn as rrn, o.order_id as order_id, o.seller_id as seller_id
FROM 
	orders o
WHERE
	o.order_id=$1
AND 
	o.seller_id=$2
LIMIT 1
`

type GetOrderParams struct {
	OrderID  string
	SellerID string
}

type GetOrderRow struct {
	OrderRequest json.RawMessage
	Rrn          string
	OrderID      string
	SellerID     string
}

func (q *Queries) GetOrder(ctx context.Context, arg GetOrderParams) (GetOrderRow, error) {
	row := q.db.QueryRowContext(ctx, getOrder, arg.OrderID, arg.SellerID)
	var i GetOrderRow
	err := row.Scan(
		&i.OrderRequest,
		&i.Rrn,
		&i.OrderID,
		&i.SellerID,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE 
  orders
SET 
  rrn = $3
WHERE
  order_id = $1
AND 
  seller_id = $2
RETURNING id, create_time, order_request, rrn, order_id, seller_id
`

type UpdateOrderParams struct {
	OrderID  string
	SellerID string
	Rrn      string
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder, arg.OrderID, arg.SellerID, arg.Rrn)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.OrderRequest,
		&i.Rrn,
		&i.OrderID,
		&i.SellerID,
	)
	return i, err
}
